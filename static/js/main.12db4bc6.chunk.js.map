{"version":3,"sources":["components/avaBlock.tsx","api/api.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","avgWrap","position","display","justifyContent","alignItems","height","width","borderRadius","widthAva","overflow","avaImg","avaBlock","btnsBlock","flexDirection","paddingTop","btns","paddingBottom","marginLeft","uploadProgress","infoError","top","color","AvaBlock","resultCodeInfo","props","useState","isEditMod","setIsEditMod","url","avaUrl","file","undefined","imgInfo","setImgInfo","imgRef","useRef","useEffect","styles","className","ref","src","alt","CircularProgress","variant","value","size","id","type","style","onChange","e","current","target","files","oFReader","FileReader","readAsDataURL","onload","oFREvent","result","accept","textError","isUploadingAva","Button","onClick","uploadAvaThunk","disabled","resetError","uploadAvaRequestCancelThunk","opacity","transition","htmlFor","component","uploadAvaRequestCancel","initialState","uploadPrograss","actions","reducer","state","action","App","useReducer","dispatch","ava","formData","FormData","append","requestIsEnd","setTimeout","watchProgress","axios","post","process","onUploadProgress","Math","round","loaded","total","cancelToken","CancelToken","c","cancel","then","reqData","data","uploadAvaRequest","v","avaLoadInfo","resultCode","sicces","link","catch","error","isCancel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.12db4bc6.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst widthAva = 200;\n\nconst useStyles = makeStyles({\n  avgWrap: {\n    position: 'relative',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: widthAva,\n    width: widthAva,\n    borderRadius: widthAva/2,\n    overflow: 'hidden',\n  },\n  avaImg: {\n    height: 'inherit',\n  },\n  avaBlock: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  btnsBlock: {\n    position: 'relative',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    paddingTop: '25px',\n  },\n  btns: {\n    paddingBottom: 10,\n    '& > button + button': {\n      marginLeft: 10\n    }\n  },\n  uploadProgress: {\n    position: 'absolute',\n  },\n  infoError: {\n    position: 'absolute',\n    top: 2,\n    color: 'red',\n  }\n});\n\ninterface Iprops {\n  avaUrl: string\n  textError?: string\n  isUploadingAva: boolean\n  uploadProgress: undefined | number\n  resetError: () => void\n  uploadAvaRequestCancelThunk: () => void\n  uploadAvaThunk: (ava?: File) => void\n}\n\nfunction AvaBlock(props: Iprops) {\n  const [isEditMod, setIsEditMod] = useState(false);\n  const [imgInfo, setImgInfo] = useState({url:props.avaUrl, file: undefined as undefined | File});\n  const imgRef = useRef<HTMLImageElement|null>(null);\n  \n  const clearLocalImgAndResetError = () => {\n    setImgInfo({\n      url:props.avaUrl, \n      file: undefined\n    });\n    setIsEditMod(false);\n\n    if (props.textError) {\n      props.resetError();\n    }\n  };\n  const handleChangeImg = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (imgRef.current && e.target.files && e.target.files[0]) {\n      const oFReader = new FileReader();\n      const file = e.target.files[0];\n      oFReader.readAsDataURL(e.target.files[0]);\n      oFReader.onload = function (oFREvent) {\n        if (oFREvent.target) {\n          if (typeof oFREvent.target.result === 'string') {\n            setIsEditMod(true);\n            setImgInfo({\n              url:oFREvent.target.result,\n              file\n            });\n          }\n        }\n      };\n    }\n  }\n\n  useEffect(() => {\n    setImgInfo({\n      url: props.avaUrl,\n      file: undefined\n    });\n    setIsEditMod(false);\n  }, [props.avaUrl])\n\n  const styles = useStyles();\n  return (\n    <>\n      <div className={styles.avaBlock}>\n        <div className={styles.avgWrap}>\n          <img className={styles.avaImg}\n             ref={imgRef}\n             src={imgInfo.url} \n             alt=\"\"\n          />\n          <CircularProgress className={styles.uploadProgress}\n                            variant=\"static\"\n                            value={props.uploadProgress}\n                            size={widthAva+(widthAva/8)}\n          />\n        </div>\n        <input id=\"uploadUserAva\" \n               type=\"file\" \n               style={{display: 'none'}} \n               onChange={handleChangeImg}\n               accept=\".png,.jpg\"\n               size={2000000}\n        />\n      </div>\n      <div className={styles.btnsBlock}>\n          { isEditMod ?\n          <>\n            {props.textError && !props.isUploadingAva &&\n              <div className={styles.infoError}>\n                {props.textError}\n              </div>\n            }\n            <div className={styles.btns}>\n              <Button onClick={() => props.uploadAvaThunk(imgInfo.file)}\n                  disabled={props.isUploadingAva} \n                  variant=\"contained\">\n                {props.textError ? 'try again' : 'upload'}\n              </Button>\n              <Button onClick={clearLocalImgAndResetError}\n                      disabled={props.isUploadingAva} \n                      variant=\"contained\"\n              >\n                reset\n              </Button>\n            </div>\n            <Button onClick={props.uploadAvaRequestCancelThunk}\n                    disabled={!props.isUploadingAva}\n                    variant=\"contained\" style={{opacity: props.isUploadingAva ? 1 : 0, transition: '0.5s'}}\n            >\n              stop upload\n            </Button>\n          </>\n          :\n            <label htmlFor=\"uploadUserAva\" >\n              <Button variant=\"contained\" \n                      component=\"span\">\n                change\n              </Button>\n            </label>\n          }\n      </div>\n    </>\n  );\n}\n\nexport default AvaBlock","import * as axios from 'axios'\n\nexport let uploadAvaRequestCancel: {cancel?: axios.Canceler} = {};\nexport const uploadAvaRequest = (ava: FormData, watchProgress: (value: number) => void) => axios.default\n  .post<IdefaultRequest<{link: string}>>(`${process.env.REACT_APP_BACK_URL}loadImage`, ava, {\n    onUploadProgress: (e) => { watchProgress(Math.round(e.loaded / e.total * 100))},\n    cancelToken: new axios.default.CancelToken((c) => { uploadAvaRequestCancel.cancel = c })\n  })\n  .then(reqData => reqData.data)\n\n\nexport enum resultCodeInfo {\n  sicces = 0,\n  error = 1\n}\nexport interface IerrorRequest {\n  resultCode: resultCodeInfo.error\n  messag: string\n}\nexport interface IsuccesRequest<R> {\n  resultCode: resultCodeInfo.sicces\n  data?: R\n}\nexport type IdefaultRequest<R=void> = IerrorRequest | IsuccesRequest<R>","import React, {useReducer} from 'react';\nimport AvaBlock from './components/avaBlock';\nimport {uploadAvaRequest, resultCodeInfo} from './api/api';\nimport {uploadAvaRequestCancel} from './api/api';\nimport './App.css';\nimport * as axios from 'axios';\n\nexport type ActionsOfObj<obj> = obj extends { [key: string]: (...arg: any) => infer fullActions } ? fullActions : never;\n\nconst initialState = {\n  isUploadingAva: false,\n  avaUrl: 'https://www.imgonline.com.ua/examples/bee-on-daisy.jpg',\n  uploadPrograss: 0,\n  textError: undefined as undefined | string\n};\n\nconst actions = {\n  startUpload: () => ({\n    type: \"START_UPLOAD\"\n  }) as const,\n  stopUpload: () => ({\n    type: \"STOP_UPLOAD\"\n  }) as const,\n  changeUploadProgress: (value: number) => ({\n    type: \"CHANGE_PROGRESS\",\n    value,\n  }) as const,\n  endUpload: (avaUrl: string) => ({\n    type: \"END_UPLOAD\",\n    avaUrl\n  }) as const,\n  setErrorRequest: (textError: string) => ({\n    type: \"SET_ERROR\",\n    textError\n  }) as const,\n  resetRequestError: () => ({\n    type: \"RESET_ERROR\"\n  }) as const,\n}\n\nfunction reducer(state: typeof initialState, action: ActionsOfObj<typeof actions>): typeof initialState {\n  switch (action.type) {\n    case \"START_UPLOAD\": {\n      return {\n        ...state,\n        isUploadingAva: true,\n        uploadPrograss: 0,\n        textError: '',\n      }\n    }\n    case \"CHANGE_PROGRESS\": {\n      return {\n        ...state,\n        uploadPrograss: action.value\n      }\n    }\n    case \"END_UPLOAD\": {\n      return {\n        ...state,\n        avaUrl: action.avaUrl,\n        uploadPrograss: 0,\n        isUploadingAva: false,\n        textError: undefined\n      }\n    }\n    case \"SET_ERROR\": {\n      return {\n        ...state,\n        textError: action.textError,\n        isUploadingAva: false,\n        uploadPrograss: 0,\n      }\n    }\n    case \"RESET_ERROR\": {\n      return {\n        ...state,\n        textError: ''\n      }\n    }\n    case \"STOP_UPLOAD\": {\n      return {\n        ...state,\n        isUploadingAva: false,\n        uploadPrograss: 0,\n      }\n    }\n    default:\n      return state;\n  }\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const uploadAvaThunk = (ava?: File) => {\n    if (ava) {\n      const formData = new FormData();\n      formData.append('img', ava);\n      \n      // fix rerenders then error request\n      let requestIsEnd = false;\n      setTimeout(() => !requestIsEnd && dispatch(actions.startUpload()),100);\n      uploadAvaRequest(formData, (v) => dispatch(actions.changeUploadProgress(v)))\n        .then(avaLoadInfo => {\n          if (avaLoadInfo.resultCode === resultCodeInfo.sicces && avaLoadInfo.data) {\n            dispatch(actions.endUpload(process.env.REACT_APP_BACK_URL+avaLoadInfo.data.link));\n          } else {\n            dispatch(actions.setErrorRequest('Error loading'))\n          }\n        })\n        .catch((error) => {\n          if (!axios.default.isCancel(error)) {\n            dispatch(actions.setErrorRequest('Error loading'))\n          }\n        })\n        .then(() => {requestIsEnd = true})\n    }\n  }\n  const uploadAvaRequestCancelThunk = () => {\n    if(uploadAvaRequestCancel.cancel) {\n      uploadAvaRequestCancel.cancel();\n      dispatch(actions.stopUpload());\n    }\n  }\n  const resetError = () => dispatch(actions.resetRequestError());\n\n  return (\n    <div className=\"App\">\n      <AvaBlock uploadAvaThunk={uploadAvaThunk}\n                uploadAvaRequestCancelThunk={uploadAvaRequestCancelThunk}\n                resetError={resetError}\n                avaUrl={state.avaUrl}\n                textError={state.textError}\n                uploadProgress={state.uploadPrograss}\n                isUploadingAva={state.isUploadingAva}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}